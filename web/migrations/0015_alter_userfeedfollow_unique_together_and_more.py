# Generated by Django 5.0.6 on 2024-07-17 18:05

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


def table_exists(apps, schema_editor, table_name):
    return table_name in schema_editor.connection.introspection.table_names()


class Migration(migrations.Migration):

    dependencies = [
        ("web", "0014_alter_clipuserscore_score"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(
            code=lambda apps, schema_editor: None,
            reverse_code=lambda apps, schema_editor: None,
            hints={"target_db": "default"},
            atomic=True,
        ),
        migrations.AlterField(
            model_name="clipuserscore",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_clip_scores",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="clipuserview",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_clip_views",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="FeedUserInterest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_interested", models.BooleanField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_follows",
                        to="web.feed",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feed_follows",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "feed")},
            },
        ),
        migrations.CreateModel(
            name="FeedUserScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.FloatField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_scores",
                        to="web.feed",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feed_scores",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "feed")},
            },
        ),
        migrations.RunPython(
            code=lambda apps, schema_editor: (
                [
                    schema_editor.execute("DROP TABLE IF EXISTS web_userfeedfollow"),
                    schema_editor.execute("DROP TABLE IF EXISTS web_usertopic"),
                    schema_editor.execute("DROP TABLE IF EXISTS web_cliptopic"),
                ]
                if table_exists(apps, schema_editor, "web_userfeedfollow")
                else None
            ),
            reverse_code=migrations.RunPython.noop,
        ),
    ]
